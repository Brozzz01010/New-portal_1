from news.models import *

#Создать двух пользователей (с помощью метода User.objects.create_user('username')).

u1 = User.objects.create_user('Andrey')
u2 = User.objects.create_user('Nicolai')

#Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(authorUser=u1)
Author.objects.create(authorUser=u2)

#Добавить 4 категории в модель Category.

Category.objects.create(name='IT')
Category.objects.create(name='Movie')
Category.objects.create(name='Finance')
Category.objects.create(name='Sport')

#Добавить 2 статьи и 1 новость.

author1 = Author.objects.get(id=1)
author2 = Author.objects.get(id=2)

Post.objects.create(author=author1, categoryType='NW', title='news title', text = 'some news text')
Post.objects.create(author=author1, categoryType='AR', title='article1 title', text = 'some article text')
Post.objects.create(author=author2, categoryType='AR', title='article2 title', text = 'any article text')

#Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2)) 
Post.objects.get(id=2).postCategory.add(Category.objects.get(id=3)) 
Post.objects.get(id=3).postCategory.add(Category.objects.get(id=4)) 

#Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='comment1')
Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text='comment2')
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, text='comment3')
Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='comment4')

#Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Comment.objects.get(id=1).like()
Comment.objects.get(id=1).like()
Comment.objects.get(id=1).like()
Comment.objects.get(id=1).dislike()

Comment.objects.get(id=2).dislike()
Comment.objects.get(id=2).dislike()
Comment.objects.get(id=2).like()

Comment.objects.get(id=3).like()
Comment.objects.get(id=3).dislike()
Comment.objects.get(id=3).dislike()
Comment.objects.get(id=3).like()
Comment.objects.get(id=3).like()
Comment.objects.get(id=3).like()
Comment.objects.get(id=3).like()

Comment.objects.get(id=4).dislike()
Comment.objects.get(id=4).dislike()

Post.objects.get(id=1).like()
Post.objects.get(id=1).like()
Post.objects.get(id=1).like()
Post.objects.get(id=1).like()
Post.objects.get(id=1).like()
Post.objects.get(id=1).like()
Post.objects.get(id=1).like()
Post.objects.get(id=1).dislike()
Post.objects.get(id=1).dislike()

Post.objects.get(id=2).dislike()
Post.objects.get(id=2).dislike()
Post.objects.get(id=2).dislike()
Post.objects.get(id=2).dislike()
Post.objects.get(id=2).like()

Post.objects.get(id=3).like()
Post.objects.get(id=3).like()
Post.objects.get(id=3).like()
Post.objects.get(id=3).like()
Post.objects.get(id=3).like()
Post.objects.get(id=3).like()

#Обновить рейтинги пользователей.

a1 = Author.objects.get(id=1)
a1.update_rating()

a2 = Author.objects.get(id=2)
a2.update_rating()

#Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

r = Author.objects.order_by('-ratingAuthor')
for i in r:
i.authorUser.username                    
i.ratingAuthor

#Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

p = Post.objects.order_by('-rating')
for i in p[:1]:
i.dateCreation
i.author.authorUser
i.title
i.preview()

#Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

Post.objects.all().order_by('-rating')[0].comment_set.values('dateCreation', 'commentUser', 'rating', 'text')